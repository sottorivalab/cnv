/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SEQUENZAUTILS_GCWIGGLE' {
        ext.when =  { params.create_gc_wiggle }
    	publishDir = [
            path: { "${params.gc_wiggle_location}/${params.genome}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SEQUENZAUTILS_BIN' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SEQUENZAUTILS_BAM2SEQZ' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'UNZIP' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            enabled: false
        ]
    }

    withName: SEQUENZAUTILS_RSEQZ {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/${meta.id}/${params.seq_type}/rseqz" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TABIX_TABIX {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/${meta.id}/${params.seq_type}/seqz" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ASCAT' {
        ext.args   = { [
            "gender": meta.sex,
            "genomeVersion": params.ascat_genome,
            "purity": params.ascat_purity,
            "ploidy": params.ascat_ploidy,
            "minCounts": params.ascat_min_counts,
            "chrom_names": meta.sex == 'XX' ? "c(1:22, 'X')" : "c(1:22, 'X', 'Y')", // for faster testing use "c('21', '22')"
            "min_base_qual": params.ascat_min_base_qual,
            "min_map_qual": params.ascat_min_map_qual
            ]
        }
        //ext.when   = { params.tools && params.tools.split(',').contains('ascat') }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/${meta.id}/${params.seq_type}/ascat/" },
            pattern: "*{png,cnvs.txt,metrics.txt,purityploidy.txt,segments.txt,LogR.txt,BAF.txt}"
        ]
    }
}
